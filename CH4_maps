#ifndef NAME_H
#define NAME_H
#include <string>
#include <iostream>
#include <vector>
#include <ostream>
#include <istream>
#include <map>
#include <iomanip>
class Name{
    private:
        std::string first{};
        std::string second{};
    public:
        Name(const std::string & name1, const std::string& name2):
        first(name1),second(name2){}
        Name()=default;

    //Less than operator
    bool operator<(const Name& name) const {
        return second < name.second || (second == name.second && first<name.first);
    }
    friend std::istream& operator>>(std::istream& in , Name & name );
    friend std::ostream& operator<<(std::ostream& out , const Name & name );
};
    //extraction operator overload
    inline std::istream& operator>>(std::istream& in , Name & name ){
        in >> name.first >> name.second;
        return in;
    }

    //insertion operator overload
    inline std::ostream& operator<<(std::ostream& out, const Name& name ){
        out << name.first + " " + name.second;
        return out;
    } 

#endif


//Ex4_01.cpp
//Storing names and ages
#include <iostream>  //for standard streams
#include <iomanip>   //for stream manipulators
#include <string>    //for string class
#include <map>       //for map container class
#include <utility>   //for pair<> and make_pair<>()
#include <cctype>    //for toupper()
//#include "Name.h"
using std::string;
using Entry = std::pair<const Name, size_t>;
using std::make_pair;
using std::map;

Entry get_entry(){
    std::cout <<  "Enter first and second names followed by the age: ";
    Name name {};
    size_t age  {};
    std::cin >> name >> age;
    return std::make_pair(name, age);
}

void list_entries(const std::map<Name, size_t>& people){
    for(auto& entry: people){
        std::cout << std::left << std::setw(30) << entry.first << 
             std::right <<  std::setw(4) << entry.second << std::endl;
    }
}

int main() { 
    map<Name, size_t> people{{{"Ann", "Dante"}, 25}, {{"Bill", "Hook"}, 46},
    {{"Jim", "James"}, 32}, {{"Mark", "Time"}, 32}};
     std::cout << "\nThe initial contents of the map is:\n";
    list_entries(people);

    char answer{'Y'};
    std::cout << "\nEnter a Name and age entry.\n";
    while(std::toupper(answer)=='Y'){
        Entry entry{get_entry()};
        auto pr = people.insert(entry);
        if(!pr.second)
        {
            //It's there already - check whether we should update
            std::cout <<  "key \"" << pr.first->first <<
                "\" already present. Do you want to update the age (Y or N)? ";
            std::cin >>  answer;
            if(std::toupper(answer)=='Y')
                pr.first->second =entry.second;
        }
         // Check whether there are more to be entered
        std::cout << "Do you want to enter another entry(Y or N)? ";
        std::cin >> answer;
    }
    std::cout << "\nThe map now contains the following entries:\n";
    list_entries(people);
    
    }
